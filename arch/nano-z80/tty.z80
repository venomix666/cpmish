; nano-z80 cpmish BIOS © 2025 Henrik Löfgren
; This file is distributable under the terms of the 2-clause BSD license.
; See COPYING.cpmish in the distribution root directory for more information.

    maclib cpm
    maclib cpmish
    maclib nano-z80

    extrn SYSIN
    extrn SYSOUT
    extrn ADDAHL

    public TTYINIT
    public TTYPUTC
    public TTYPUT8
    public TTYPUT16
    public TTYPUTSI

    cseg

SCREEN_WIDTH = 80
SCREEN_HEIGHT = 30

CURSOR_UPDATES = 1
CLEAR_SCREEN_ON_INIT = 1
EMULATE_CLEAR_TO_EOL = 0
EMULATE_CLEAR_TO_EOS = 0
    maclib tty
    maclib print

TTYINIT equ tty_init
TTYPUTC equ tty_putc
TTYPUT8 equ tty_puthex8
TTYPUT16 equ tty_puthex16
TTYPUTSI equ tty_putsi

tty_rawwrite:
    push af
    call video_init
    call tty_update_cursor
    ; Check if output should be inverted
    ld a, (tty_attributes)
    bit 0, a
    jr z, vid_write
    pop af
    or a, $80
    push af
vid_write:
    pop af
    out (VID_WRITE_X), a
    ret

; Moves the cursor to the current location.
tty_update_cursor:
    call video_init
    ld a, (tty_cursorx)
    out (VID_CURSOR_X), a
    ld a, (tty_cursory)
    out (VID_CURSOR_Y), a
    ret
 
tty_delete_line:
    call tty_update_cursor
    call video_init
    out (VID_DELETE_LINE), a
    call tty_update_cursor
    ret
        ;jp tty_update_cursor

tty_insert_line:
    call video_init
    out (VID_INSERT_LINE), a
    ret
        ;jp tty_update_cursor 

tty_clear_to_eol:
    call video_init
    out (VID_CLEAR_TO_EOL), a
    ret
        ;jp tty_update_cursor

tty_clear_to_eos:
    call video_init
    out (VID_CLEAR_TO_EOS), a
    ret ;jp tty_update_cursor

; This is soooo ugly, but it works for now
video_init:
    ld a, IO_SELECT_VID
    out (IO_BANK), a
    ld a,0
video_init_delay:
    inc a
    cp a, 25
    jr nz, video_init_delay
    ret
   

; vim: ts=4 sw=4 et ft=asm

